/********************************************************************************
			功能名称:	6脚-3位数码管
---------------------------------------------------------------------------------
使用方法：
	要显示的数字变量是Num
	在主循环中添加：
		if(Nixie_Scan_Flag)
		{
			Scan_Flag = 0;
			LED_Scan_Display_6COM(Num);
		}		
	在中断中添加：
		Nixie_Scan_Flag = 1;
---------------------------------------------------------------------------------
注意：
	1.建议用1ms扫描数码管一次，所以定时中断是1ms
	2.引脚定义要根据实际需要修改，要对应6-3数码管图的脚位来
********************************************************************************/

//#include	"extern.h"

//IO pin definitions
LED_IO_1	BIT   PB.0
LED_IO_2	BIT   PB.1
LED_IO_3	BIT   PB.2
LED_IO_4	BIT   PB.3
LED_IO_5	BIT   PB.4
LED_IO_6	BIT   PB.5


word	Num = 0; 	//显示的数字

byte 	Digit_COM_Count;
byte	Data_Hun;	//百位数字
byte	Data_Ten;	//十位数字
byte	Data_Bit;	//个位数字
bit		Nixie_Scan_Flag;


//以下每个位表示的是数码管的段
byte LED1_Flag = 0x00;
bit  LED1_A_Flag :   LED1_Flag.0;
bit  LED1_B_Flag :   LED1_Flag.1;
bit  LED1_C_Flag :   LED1_Flag.2;
bit  LED1_D_Flag :   LED1_Flag.3;
bit  LED1_E_Flag :   LED1_Flag.4;
bit  LED1_F_Flag :   LED1_Flag.5;
bit  LED1_G_Flag :   LED1_Flag.6;
bit  LED1_P_Flag :   LED1_Flag.7;

byte LED2_Flag = 0x00;
bit  LED2_A_Flag :   LED2_Flag.0; 
bit  LED2_B_Flag :   LED2_Flag.1; 
bit  LED2_C_Flag :   LED2_Flag.2;
bit  LED2_D_Flag :   LED2_Flag.3;
bit  LED2_E_Flag :   LED2_Flag.4;
bit  LED2_F_Flag :   LED2_Flag.5;
bit  LED2_G_Flag :   LED2_Flag.6;
bit  LED2_P_Flag :   LED2_Flag.7;

byte LED3_Flag = 0x00;
bit  LED3_A_Flag :   LED3_Flag.0; 
bit  LED3_B_Flag :   LED3_Flag.1; 
bit  LED3_C_Flag :   LED3_Flag.2;
bit  LED3_D_Flag :   LED3_Flag.3;
bit  LED3_E_Flag :   LED3_Flag.4;
bit  LED3_F_Flag :   LED3_Flag.5;
bit  LED3_G_Flag :   LED3_Flag.6;
bit  LED3_P_Flag :   LED3_Flag.7;


byte DIGIT_CODE[10] = {0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F}; //bit位高到低排列为seg8~1/H~A


void	LED_6IO_in(void)
{
	$ LED_IO_1 in;
	$ LED_IO_2 in;
	$ LED_IO_3 in;
	$ LED_IO_4 in;
	$ LED_IO_5 in;
	$ LED_IO_6 in;
}

void	Data_Display_Conversion(byte num_in)
{
	byte H_Count = 0;
	byte T_Count = 0;
	word U16_Data_Temp = num_in;
	
	while(1)
	{
		if(U16_Data_Temp >= 100)
		{
			U16_Data_Temp = U16_Data_Temp - 100;
			H_Count ++;
		}		
		else if(U16_Data_Temp >= 10)
		{
			U16_Data_Temp = U16_Data_Temp - 10;
			T_Count ++;
		}
		else
		{
			Data_Hun = H_Count;
			Data_Ten = T_Count;
			Data_Bit = U16_Data_Temp;
			break;
		}
	}
	//低位、高位赋予数字对应段选
	LED1_Flag = DIGIT_CODE[Data_Hun];
	LED2_Flag = DIGIT_CODE[Data_Ten];
	LED3_Flag = DIGIT_CODE[Data_Bit];
}

void	LED_Scan_Display_6COM(byte num_in)
{
	LED_6IO_in();
	
	Data_Display_Conversion(num_in);

	Digit_COM_Count ++;
	if(Digit_COM_Count > 9)
	{
		Digit_COM_Count = 1;
	}

	switch(Digit_COM_Count) 
	{	
		case 1 : $ LED_IO_1 out,high;
					if(LED1_A_Flag)
					{
						$ LED_IO_2 out,low;
					}
					if(LED1_D_Flag)
					{
						$ LED_IO_3 out,low;
					}
					if(LED1_E_Flag)
					{
						$ LED_IO_4 out,low;
					}
					if(LED1_F_Flag)
					{
						$ LED_IO_5 out,low;
					}
					if(LED1_G_Flag)
					{
						$ LED_IO_6 out,low;
					}
					break; 

		case 2 : $ LED_IO_2 out,high;
					if(LED1_B_Flag)
					{
						$ LED_IO_1 out,low;
					}
					if(LED1_C_Flag)
					{
						$ LED_IO_3 out,low;
					}
					if(LED1_P_Flag)
					{
						$ LED_IO_4 out,low;
					}
					if(LED2_E_Flag)
					{
						$ LED_IO_5 out,low;
					}
					if(LED2_F_Flag)
					{
						$ LED_IO_6 out,low;
					}
					break; 

		case 3 : $ LED_IO_3 out,high;
					if(LED2_A_Flag)
					{
						$ LED_IO_1 out,low;
					}
					if(LED2_B_Flag)
					{
						$ LED_IO_2 out,low;
					}
					if(LED2_C_Flag)
					{
						$ LED_IO_4 out,low;
					}
					if(LED2_D_Flag)
					{
						$ LED_IO_5 out,low;
					}
					if(LED2_G_Flag)
					{
						$ LED_IO_6 out,low;
					}
					break;  

		case 4 : $ LED_IO_4 out,high;
					if(LED2_P_Flag)
					{
						$ LED_IO_1 out,low;
					}
					if(LED3_A_Flag)
					{
						$ LED_IO_2 out,low;
					}
					if(LED3_D_Flag)
					{
						$ LED_IO_3 out,low;
					}
					if(LED3_E_Flag)
					{
						$ LED_IO_5 out,low;
					}
					if(LED3_F_Flag)
					{
						$ LED_IO_6 out,low;
					}
					break; 

		case 5 : $ LED_IO_5 out, high;
					if(LED3_G_Flag)
					{
						$ LED_IO_1 out,low;
					}
					if(LED3_B_Flag)
					{
						$ LED_IO_2 out,low;
					}
					if(LED3_C_Flag)
					{
						$ LED_IO_3 out,low;
					}
					if(LED3_P_Flag)
					{
						$ LED_IO_4 out,low;
					}
					break; 

	}	
}